<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单链表-数组模拟版</title>
      <link href="/2024/04/15/%E5%8D%95%E9%93%BE%E8%A1%A8-%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%89%88/"/>
      <url>/2024/04/15/%E5%8D%95%E9%93%BE%E8%A1%A8-%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数组模拟单链表"><a href="#数组模拟单链表" class="headerlink" title="数组模拟单链表"></a>数组模拟单链表</h1><p>由于顺序表的插入删除操作需要移动大量的元素，影响了运行效率，因此引入了线性表的链式存储——<strong>单链表</strong>。单链表通过一组任意的存储单元来存储线性表中的数据元素，不需要使用地址连续的存储单元，因此它不要求在逻辑上相邻的两个元素在物理位置上也相邻。</p><p><strong>单链表的特点：</strong></p><ol><li>单链表不要求逻辑上相邻的两个元素在物理位置上也相邻，因此不需要连续的存储空间。</li><li>单链表是非随机的存储结构，即不能直接找到表中某个特定的结点。查找某个特定的结点时，需要从表头开始遍历，依次查找。<br> <br>对于每个链表结点，除了存放元素自身的信息外，还需要存放一个指向其后继的指针。</li></ol><p><strong>单链表中结点类型的描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LNode&#123; //定义单链表结点类型</span><br><span class="line">int data; //数据域，可以是别的各种数据类型，本文统一用int类型</span><br><span class="line">struct LNode *next; //指针域</span><br><span class="line">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure><p>但采用上述方法申请新结点，需要用到<code>new Node()</code>函数，这样会浪费大量时间，特别是在曹祖数特别大的情况下，这样，用数组模拟链表可以省去大量时间，且可以完成链表存在的所有操作。</p><h2 id="数组模拟方法"><a href="#数组模拟方法" class="headerlink" title="数组模拟方法"></a>数组模拟方法</h2><p>数组模拟链表需要用到两个数组<code>value[N]</code>以及<code>next[N]</code>，其中<code>value[N]</code>数组用来保存节点的值；<code>next[N]</code>数组用来保存当前节点所指向节点的数组下标；</p><p>同时用<code>head</code>变量记录当前的头节点，<code>idx</code>记录当前可插入的数组下标，见下图所示：</p><p><img src="小新.jpg" alt="本地路径" title="相对路径演示,上一级目录"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序quick_sort</title>
      <link href="/2024/04/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort/"/>
      <url>/2024/04/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><strong>快速排序</strong>是一种原地排序，只需要一个很小的栈作为辅助空间，空间复杂度为<em>O(logN)</em>，所以适合在数据集比较大且无序的时候使用。实现方法有经典快排和双指针快排，本文介绍的是双指针快排的实现。</p><table align="center" style="width:100%; border:#000 solid; border-width:1px 0"><caption>快排算法复杂度</caption><thead style="border-bottom:#000 1px solid;"><tr><th style="border:0">空间复杂度</th><td style="border:0">时间复杂度（最好）</td><td style="border:0">时间复杂度（最差）</td><td style="border:0">时间复杂度（平均）</td></tr></thead><tr><th style="border:0">O(logN)</th><td style="border:0">O(N)</td><td style="border:0">O(N^2)</td><td style="border:0">O(NlogN)</td></tr></table><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>随机找出一个数，可以随机取，也可以取固定位置，一般是取第一个或最后一个称为基准，然后就是比基准小的放在左边，比基准大的放到右边。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>一种是在每次递归时利用两个数组存取基准pivot前后的数据，这种空间复杂度较高。</p><p>另外一种是利用双指针的思想：利用left和right指针，首先left从前向后遍历，碰到大于pivot的数则停止；right从后向前遍历，碰到小于pivot的数则停止，随后交换left和right处的数据，直到left&gt;=right。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> idx = <span class="built_in">rand</span>() % (r - l + <span class="number">1</span>) + l;</span><br><span class="line">    <span class="built_in">swap</span>(q[idx], q[r]);</span><br><span class="line">    <span class="type">int</span> x=q[r];</span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>, j=r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">quick_sort</span>(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快排的应用——-快速选择寻找第k个数"><a href="#快排的应用——-快速选择寻找第k个数" class="headerlink" title="快排的应用——-快速选择寻找第k个数"></a>快排的应用——-快速选择寻找第k个数</h2><p>给定一个长度为n的整数数列，以及一个整数 k，快速求出数列从小到大排序后的第k个数。<br><strong>思路</strong><br>快速排序后根据下标选择即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick_select</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> idx=<span class="built_in">rand</span>()%(r-l+<span class="number">1</span>)+l;</span><br><span class="line">    <span class="type">int</span> x=q[idx];</span><br><span class="line">    <span class="built_in">swap</span>(q[idx], q[r]);</span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>, j=r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_select</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_select</span>(q, j+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, label;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;label);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">quick_select</span>(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[label<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>决策树DT</title>
      <link href="/2024/04/11/%E5%86%B3%E7%AD%96%E6%A0%91DT/"/>
      <url>/2024/04/11/%E5%86%B3%E7%AD%96%E6%A0%91DT/</url>
      
        <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>思想：<strong>分而治之</strong>，即在每个节点寻找最优的划分属性</p><table align="center" style="width:100%; border:#000 solid; border-width:1px 0"><caption>表1 下午3点通知家长名单</caption><thead style="border-bottom:#000 1px solid;"><tr><th style="border:0">学生姓名</th><td style="border:0">性别</td><td style="border:0">语文作业是否完成</td><td style="border:0">周记是否完成</td></tr></thead><tr><th style="border:0">张三</th><td style="border:0">M</td><td style="border:0">Yes</td><td style="border:0">No</td></tr><tr><th style="border:0">李四</th><td style="border:0">F</td><td style="border:0">No</td><td style="border:0">Yes</td></tr><tr><th style="border:0">王五</th><td style="border:0">M</td><td style="border:0">No</td><td style="border:0">No</td></tr></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>石子合并</title>
      <link href="/2024/04/10/%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/"/>
      <url>/2024/04/10/%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h1><p>石子合并是一类动态规划问题，其中石子合并代价的解释为两堆石子的数量和。分为如下典型的三类：</p><h2 id="不加限制的合并"><a href="#不加限制的合并" class="headerlink" title="不加限制的合并"></a>不加限制的合并</h2><p>即为每次任意合并两堆，输出为最小花费。<br>贪心策略每次找出最小的两个元素即可（n-1轮）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">w=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">    label_min=<span class="built_in">min</span>(w)</span><br><span class="line">    w.remove(label_min)</span><br><span class="line">    w[w.index(<span class="built_in">min</span>(w))]+=label_min</span><br><span class="line"><span class="built_in">print</span>(w[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="线性（相邻）合并"><a href="#线性（相邻）合并" class="headerlink" title="线性（相邻）合并"></a>线性（相邻）合并</h2><p>即为每次合并相邻两堆，输出为最小花费。<br><strong>动态规划</strong>，具体思路为：</p><ul><li><em>确定状态：</em>设dp[i][j]表示合并第i到j个石子的最小代价。</li><li><em>确定状态转移方程：</em>对于第i到第j个石子的合并，可以选择在任意一个位置k断开，将问题分成合并i到k之间的石子和合并k+1到j之间的石子两个子问题。因此，可以得到状态转移方程：<br><strong>dp[i][j] &#x3D; min(dp[i][j], dp[i][k] + dp[k+1][j] + sum[j]-sum[i-1]) (i&lt;&#x3D;k&lt;j)</strong><br>其中sum[i]表示第i个石子前（包括i）的重量和，即需要合并的代价。</li><li><em>确定边界：</em>当只有一个石子时，代价为0，因此dp[i][i] &#x3D; 0。</li><li><em>最终结果：</em>最终的结果为dp[1][n]，表示合并全部石子的最小代价。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">310</span>][<span class="number">310</span>];  <span class="comment">//在这里创建数组，则初始化均为0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> w[n+<span class="number">1</span>], sum[n+<span class="number">1</span>];</span><br><span class="line">    sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">2</span>;l&lt;=n;l++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+l<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> j=i+l<span class="number">-1</span>;</span><br><span class="line">            f[i][j]=<span class="number">1e8</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++)</span><br><span class="line">            f[i][j]=<span class="built_in">min</span>(f[i][j], f[i][k]+f[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形合并"><a href="#环形合并" class="headerlink" title="环形合并"></a>环形合并</h2><p>将环形转换为直线：通过将石子数量变为2n来转换成直线问题。 即将两个数组w[1,…,n]串联即可，这样存在1~n ; 2~n~1 ; n~1~n-1共n个数组，对于n个数组，采用线性合并的方法即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">410</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> w[n+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> sum[<span class="number">2</span>*n+<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i+n]=sum[i<span class="number">-1</span>+n]+w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">2</span>;l&lt;=<span class="number">2</span>*n;l++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+l<span class="number">-1</span>&lt;=<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> j=i+l<span class="number">-1</span>;</span><br><span class="line">            f[i][j]=<span class="number">1e8</span>;</span><br><span class="line">            g[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++)&#123;</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j], f[i][k]+f[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);</span><br><span class="line">                g[i][j]=<span class="built_in">max</span>(g[i][j], g[i][k]+g[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> label1=f[<span class="number">1</span>][n];</span><br><span class="line">    <span class="type">int</span> label2=g[<span class="number">1</span>][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i][i+n<span class="number">-1</span>]&lt;label1)label1=f[i][i+n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(g[i][i+n<span class="number">-1</span>]&gt;label2)label2=g[i][i+n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;label1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;label2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Plant Pathology-2021 分类任务</title>
      <link href="/2024/03/27/cv-coursework/"/>
      <url>/2024/03/27/cv-coursework/</url>
      
        <content type="html"><![CDATA[ <!-- 在线显示PDF --> <!-- 第一种方式，可调整pdf显示的大小，比较灵活 --> <embed src="./cv-coursework.pdf" width="100%" height="750" type="application/pdf"> <!-- 第二种方式 --> <!-- <div class="row">    <embed src="./mysql.pdf" width="100%" height="550" type="application/pdf"></div> -->]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/21/hello-world/"/>
      <url>/2023/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
